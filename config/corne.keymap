/*
 * My Corne Layout
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

/** -- Layers -- **/
#define LAYER_Base 0
#define LAYER_Number 1

/** -- Key Positions for Positional Hold Tap -- **/
#define LEFT_HAND_KEYS  \
     0  1  2  3  4  5   \
    12 13 14 15 16 17   \
    24 25 26 27 28 29

#define RIGHT_HAND_KEYS \
     6  7  8  9 10 11   \
    18 19 20 21 22 23   \
    30 31 32 33 34 35

#define THUMB_KEYS  \
    36 37 38    39 40 41

/** -- Home Row Mods -- **/
#define HRM_PINKY_HOLDING_TYPE "tap-preferred"
#define HRM_PINKY_HOLDING_TIME 270
#define HRM_PINKY_STREAK_DECAY 250
#define HRM_PINKY_REPEAT_DECAY 300

#define HRM_RING_HOLDING_TYPE "tap-preferred"
#define HRM_RING_HOLDING_TIME 270
#define HRM_RING_STREAK_DECAY 250
#define HRM_RING_REPEAT_DECAY 300

#define HRM_MIDDLE_HOLDING_TYPE "tap-preferred"
#define HRM_MIDDLE_HOLDING_TIME 270
#define HRM_MIDDLE_STREAK_DECAY 250
#define HRM_MIDDLE_REPEAT_DECAY 300

#define HRM_INDEX_HOLDING_TYPE "tap-preferred"
#define HRM_INDEX_HOLDING_TIME 170
#define HRM_INDEX_STREAK_DECAY 150
#define HRM_INDEX_REPEAT_DECAY 300

/ {
    behaviors {
        /** -- Home Row Mods -- **/
        left_pinky: hrm_left_pinky {
            label = "HRM: Left Pinky";
            compatible = "zmk,behavior-hold-tap";
            flavor = HRM_PINKY_HOLDING_TYPE;
            hold-trigger-key-positions = <RIGHT_HAND_KEYS THUMB_KEYS>;
            hold-trigger-on-release; // Wait for other home row mods
            tapping-term-ms = <HRM_PINKY_HOLDING_TIME>;
            quick-tap-ms = <HRM_PINKY_REPEAT_DECAY>;
            require-prior-idle-ms = <HRM_PINKY_STREAK_DECAY>;
            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;
        };

        right_pinky: hrm_right_pinky {
            label = "HRM: Right Pinky";
            compatible = "zmk,behavior-hold-tap";
            flavor = HRM_PINKY_HOLDING_TYPE;
            hold-trigger-key-positions = <LEFT_HAND_KEYS THUMB_KEYS>;
            hold-trigger-on-release; // Wait for other home row mods
            tapping-term-ms = <HRM_PINKY_HOLDING_TIME>;
            quick-tap-ms = <HRM_PINKY_REPEAT_DECAY>;
            require-prior-idle-ms = <HRM_PINKY_STREAK_DECAY>;
            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;
        };

        left_ring: hrm_left_ring {
            label = "HRM: Left Ring";
            compatible = "zmk,behavior-hold-tap";
            flavor = HRM_RING_HOLDING_TYPE;
            hold-trigger-key-positions = <RIGHT_HAND_KEYS THUMB_KEYS>;
            hold-trigger-on-release; // Wait for other home row mods
            tapping-term-ms = <HRM_RING_HOLDING_TIME>;
            quick-tap-ms = <HRM_RING_REPEAT_DECAY>;
            require-prior-idle-ms = <HRM_RING_STREAK_DECAY>;
            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;
        };

        right_ring: hrm_right_ring {
            label = "HRM: Right Ring";
            compatible = "zmk,behavior-hold-tap";
            flavor = HRM_RING_HOLDING_TYPE;
            hold-trigger-key-positions = <LEFT_HAND_KEYS THUMB_KEYS>;
            hold-trigger-on-release; // Wait for other home row mods
            tapping-term-ms = <HRM_RING_HOLDING_TIME>;
            quick-tap-ms = <HRM_RING_REPEAT_DECAY>;
            require-prior-idle-ms = <HRM_RING_STREAK_DECAY>;
            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;
        };

        left_middle: hrm_left_middle {
            label = "HRM: Left Middle";
            compatible = "zmk,behavior-hold-tap";
            flavor = HRM_MIDDLE_HOLDING_TYPE;
            hold-trigger-key-positions = <RIGHT_HAND_KEYS THUMB_KEYS>;
            hold-trigger-on-release; // Wait for other home row mods
            tapping-term-ms = <HRM_MIDDLE_HOLDING_TIME>;
            quick-tap-ms = <HRM_MIDDLE_REPEAT_DECAY>;
            require-prior-idle-ms = <HRM_MIDDLE_STREAK_DECAY>;
            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;
        };

        right_middle: hrm_right_middle {
            label = "HRM: Right Middle";
            compatible = "zmk,behavior-hold-tap";
            flavor = HRM_MIDDLE_HOLDING_TYPE;
            hold-trigger-key-positions = <LEFT_HAND_KEYS THUMB_KEYS>;
            hold-trigger-on-release; // Wait for other home row mods
            tapping-term-ms = <HRM_MIDDLE_HOLDING_TIME>;
            quick-tap-ms = <HRM_MIDDLE_REPEAT_DECAY>;
            require-prior-idle-ms = <HRM_MIDDLE_STREAK_DECAY>;
            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;
        };

        left_index: hrm_left_index {
            label = "HRM: Left Index";
            compatible = "zmk,behavior-hold-tap";
            flavor = HRM_INDEX_HOLDING_TYPE;
            hold-trigger-key-positions = <RIGHT_HAND_KEYS THUMB_KEYS>;
            hold-trigger-on-release; // Wait for other home row mods
            tapping-term-ms = <HRM_INDEX_HOLDING_TIME>;
            quick-tap-ms = <HRM_INDEX_REPEAT_DECAY>;
            require-prior-idle-ms = <HRM_INDEX_STREAK_DECAY>;
            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;
        };

        right_index: hrm_right_index {
            label = "HRM: Right Index";
            compatible = "zmk,behavior-hold-tap";
            flavor = HRM_INDEX_HOLDING_TYPE;
            hold-trigger-key-positions = <LEFT_HAND_KEYS THUMB_KEYS>;
            hold-trigger-on-release; // Wait for other home row mods
            tapping-term-ms = <HRM_INDEX_HOLDING_TIME>;
            quick-tap-ms = <HRM_INDEX_REPEAT_DECAY>;
            require-prior-idle-ms = <HRM_INDEX_STREAK_DECAY>;
            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;
        };

        layer_dance: layer_dance {
            label = "Layer Dance";
            compatible = "zmk,behavior-hold-tap";
            flavor = "hold-preferred";
            tapping-term-ms = <170>;
            quick-tap-ms = <300>;
            require-prior-idle-ms = <150>;
            #binding-cells = <2>;
            bindings = <&mo>, <&to>;
        };
    };

    combos {
        compatible = "zmk,combos";

        // combo_example {
        //     key-positions = <0 1>;          // When these keys are pressed...
        //     timeout-ms = 50;                // Within this timeframe...
        //     bindings = <&kp ESC>;           // Do this...
        //     layers = <0>;                   // But only on these layers...
        //     require-prior-idle-ms = -1;     // And only if no non-modifier keys have been pressed within this timeframe...
        //     slow-release = false;           // And release the combo when any key is released (true for when all keys released)
        // }
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        // conditional_layers_example {
        //     if-layers = <1 2>;  // When these two layers are activated at the same time...
        //     then-layer = <3>;   // Actually activate this layer instead
        // }
    };

    keymap {
        compatible = "zmk,keymap";

        base_layer {
            label = "Base Layer";
            bindings = <
&kp ESC           &kp B                       &kp Y                  &kp O                    &kp U                                   &kp SQT      &kp SEMI   &kp L                       &kp D                      &kp W                    &kp V                         &kp Z
&kp TAB           &left_pinky LEFT_CONTROL C  &left_ring LEFT_ALT I  &left_middle LEFT_GUI E  &left_index LEFT_SHIFT A                &kp COMMA    &kp DOT    &right_index RIGHT_SHIFT H  &right_middle RIGHT_GUI T  &right_ring RIGHT_ALT S  &right_pinky RIGHT_CONTROL N  &kp RET
&to LAYER_Base    &kp G                       &kp X                  &kp J                    &kp K                                   &kp MINUS    &kp FSLH   &kp R                       &kp M                      &kp F                    &kp P                         &kp Q
                                                                     &none                    &layer_dance LAYER_Number LAYER_Number  &kp BSPC     &kp SPACE  &none                       &none
            >;
        };

        number_layer {
            label = "Number Layer";
            bindings = <
&trans           &none             &none         &none           &none           &none     &kp MINUS     &kp NUMBER_7  &kp NUMBER_8  &kp NUMBER_9  &kp ASTERISK  &kp PERCENT
&trans           &kp LEFT_CONTROL  &kp LEFT_ALT  &kp LEFT_GUI    &kp LEFT_SHIFT  &none     &kp PLUS      &kp NUMBER_4  &kp NUMBER_5  &kp NUMBER_6  &kp FSLH      &trans
&to LAYER_Base   &none             &none         &none           &none           &none     &kp NUMBER_0  &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp DOT       &kp EQUAL
                                   &none         &to LAYER_Base  &trans    &trans           &none            &none
            >;
        };

        none_layer {
            label = "TEMPLATE: None Layer";
            bindings = <
&none  &none  &none  &none  &none  &none    &none  &none  &none  &none  &none  &none
&none  &none  &none  &none  &none  &none    &none  &none  &none  &none  &none  &none
&none  &none  &none  &none  &none  &none    &none  &none  &none  &none  &none  &none
                     &none  &none  &none    &none  &none  &none
            >;
        };

        trans_layer {
            label = "TEMPLATE: Trans Layer";
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
                        &trans  &trans  &trans    &trans  &trans  &trans
            >;
        };
    };
};
